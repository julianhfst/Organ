// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrganAPI.Data;

#nullable disable

namespace OrganAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221016101027_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("OrganAPI.Models.Boards", b =>
                {
                    b.Property<int>("PS_Boards_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FK_User_ID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PS_Boards_Id");

                    b.HasIndex("FK_User_ID");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("OrganAPI.Models.Jobs", b =>
                {
                    b.Property<int>("PS_Jobs_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FK_Board_ID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PS_Jobs_Id");

                    b.HasIndex("FK_Board_ID");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("OrganAPI.Models.Notes", b =>
                {
                    b.Property<int>("PS_Notes_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FK_User_ID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PS_Notes_Id");

                    b.HasIndex("FK_User_ID");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("OrganAPI.Task", b =>
                {
                    b.Property<int>("PS_Task_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Done")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("FK_User_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PS_Task_Id");

                    b.HasIndex("FK_User_ID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("OrganAPI.User", b =>
                {
                    b.Property<int>("PS_User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PS_User_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OrganAPI.Models.Boards", b =>
                {
                    b.HasOne("OrganAPI.User", null)
                        .WithMany("Boards")
                        .HasForeignKey("FK_User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganAPI.Models.Jobs", b =>
                {
                    b.HasOne("OrganAPI.Models.Boards", null)
                        .WithMany("Jobs")
                        .HasForeignKey("FK_Board_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganAPI.Models.Notes", b =>
                {
                    b.HasOne("OrganAPI.User", null)
                        .WithMany("Notes")
                        .HasForeignKey("FK_User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganAPI.Task", b =>
                {
                    b.HasOne("OrganAPI.User", null)
                        .WithMany("Tasks")
                        .HasForeignKey("FK_User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganAPI.Models.Boards", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("OrganAPI.User", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Notes");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
